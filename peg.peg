// Hierarchical syntax
Grammar <- Spacing Definition+ EOF
Definition <- Identifier DOT
            / Identifier (COLON / LEFTARROW) Expression CodeBlock? SEMI?
            / Identifier EXTOP Identifier
Expression <- Sequence ((BAR / SLASH) Sequence)*
Sequence <- Prefix*
Prefix <- (AND / NOT)? Assign? Suffix
Suffix <- Primary (QUESTION / STAR / PLUS)?
Primary <- Identifier !(LEFTARROW / COLON / EXTOP)
		/  OPEN Expression CLOSE
		/  Literal / Class / DOT
CodeBlock <- LCURLY2 (!RCURLY2 .)* RCURLY2
Assign <- Identifier EQ
// Lexical syntax
Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / [0-9]
// NOTE: Tweak Literal to require at least one char.
Literal <- ['] !['] '\\'? Char ['] Spacing
		/  ["] (!["] Char)+ ["] Spacing
Class <- '[' (!']' Range)* ']' Spacing
Range <- Char '-' Char / Char
Char <- .
EQ <- '=' Spacing
LEFTARROW <- "<-" Spacing
EXTOP <- "<<"
SLASH <- '/' Spacing
BAR <- '|' Spacing
AND <- '&' Spacing
NOT <- '!' Spacing
QUESTION <- '?' Spacing
STAR <- '*' Spacing
PLUS <- '+' Spacing
OPEN <- '(' Spacing
CLOSE <- ')' Spacing
DOT <- '.' Spacing
SEMI <- ';' Spacing
COLON <- ':' Spacing
LCURLY2 <- "{{" Spacing
RCURLY2 <- "}}" Spacing
Spacing <- (Space / Comment)*
Comment <- SL_COMMENT / ML_COMMENT
SL_COMMENT  <- ('#' / "//") (!EOL .)* EOL
ML_COMMENT  <- "/*" (!"*/" .)* "*/"

Space <- ' ' / "\t" / EOL

//These are special (predefined)
//EOL: EndOfLine <- "\r\n" / "\n" / "\r"
//EOF: EndOfFile <- !.
